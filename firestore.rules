rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // User collection rules
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // Campaign collection rules
    match /campaigns/{campaignId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid);
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid);
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid);
      allow list: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid);
    }

    // Allow querying campaigns collection
    match /campaigns/{document=**} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid);
      allow list: if isAuthenticated();
      allow get, list: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid);
    }

    // Template collection rules
    match /templates/{templateId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid);
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid);
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid);
    }

    // Email stats collection rules
    match /emailStats/{statId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow update: if isAuthenticated();
    }
  }
}
